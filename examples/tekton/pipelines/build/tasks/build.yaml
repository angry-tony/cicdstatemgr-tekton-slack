---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build
spec:

  workspaces:

    - name: git-source
      description: The workspace where the app source code resides
      mountPath: /workspace/git-source
      readOnly: false

    - name: cicdstatemgr-configs
      description: The workspace where cicdstatemgr configs reside
      mountPath: /workspace/cicdstatemgr-configs
      readOnly: true

    - name: cicdstatemgr-secrets
      description: The workspace where cicdstatemgr secrets reside
      mountPath: /workspace/cicdstatemgr-secrets
      readOnly: true

  results:
    - name: last-exit-code
      description: The last exit code of this task

  params:
    - name: cicdContextDataId
      type: string

    - name: pipelineRunUid
      type: string
      description: the pipelineRun uid
      default: NONE

  steps:

    #----------------------------------
    # STEP load CICD context data
    #----------------------------------
    - name: load-cicd-context-data
      image: bitsofinfo/cicdstatemgr:1.2.4
      command:
      - /bin/bash
      args:
      - -c
      - |
        cicdstatemgr \
              --config /workspace/cicdstatemgr-configs/cicdstatemgr-config.yaml  \
              --secrets /workspace/cicdstatemgr-secrets/cicdstatemgr-secrets.yaml \
              --id $(inputs.params.cicdContextDataId) \
              --load
        echo

        echo
        echo "------ /tekton/results/cicdContextDataJson ------"
        cat /tekton/results/cicdContextDataJson
        echo
        echo

        echo
        echo "------ /tekton/results/cicdContextDataYaml ------"
        cat /tekton/results/cicdContextDataYaml
        echo
        echo

        echo
        echo "------ /tekton/results/cicdContextDataShell ------"
        cat /tekton/results/cicdContextDataShell
        echo
        echo

        echo
        echo "------ /tekton/results/cicdContextDataId ------"
        cat /tekton/results/cicdContextDataId
        echo
        echo

    #----------------------------------
    # STEP kaniko build and push
    #----------------------------------
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v1.6.0-debug
      command:
        - /busybox/sh
      args:
      - -c
      - |
        source /tekton/results/cicdContextDataShell

        IMAGE_TAG_TO_PUSH="registry.kube-system.svc.cluster.local/apps/$CICD_state__gitAppName:$CICD_state__appTag"

        echo "Attempting to build and push $IMAGE_TAG_TO_PUSH via Kaniko"
        echo

        ls -al /workspace/git-source

        echo
        echo "----- /workspace/git-source/index.html.tmpl -----"
        cat /workspace/git-source/Dockerfile
        echo

        /kaniko/executor \
          --insecure-registry cicd-cache-registry.tekton-pipelines:80 \
          --skip-tls-verify-registry cicd-cache-registry.tekton-pipelines:80 \
          --insecure \
          --cache=true \
          --cache-repo=cicd-cache-registry.tekton-pipelines:80/kaniko-cache \
          --dockerfile=Dockerfile \
          --destination=$IMAGE_TAG_TO_PUSH \
          --context=/workspace/git-source \
          --build-arg=IMAGE_VERSION=$CICD_state__appTag

        LAST_EXIT_CODE=$?
        echo
        if [ "$LAST_EXIT_CODE" = "1" ]; then echo "KANIKO BUILD FAILED"; else echo "KANIKO BUILD SUCCEEDED" ; fi
        echo -n $LAST_EXIT_CODE > /tekton/results/last-exit-code
